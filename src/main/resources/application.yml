spring:
  application:
    name: econyang
  
  profiles:
    active: dev
    
  # Ï∂îÍ∞Ä ÏÑ§Ï†ï ÌååÏùº Î°úÎìú
  config:
    import:
      - classpath:config/rss-sources.yml
      - classpath:config/digest-template.yml
  
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/econyang}
    username: ${DB_USER:econyang_user}
    password: ${DB_PASS:your-secure-password}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always

  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: Asia/Seoul

logging:
  level:
    com.yourco.econyang: INFO
    org.springframework.batch: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# RSS ÏÜåÏä§ ÏÑ§Ï†ï
sources:
  - name: "BBC Business"
    code: "bbc_business"
    url: "http://feeds.bbci.co.uk/news/business/rss.xml"
    weight: 1.1
    enabled: true
    timeout: 15000
    retryCount: 3
    description: "BBC Business News RSS Feed"
  - name: "Financial Times"
    code: "ft_companies"
    url: "https://www.ft.com/companies?format=rss"
    weight: 1.3
    enabled: true
    timeout: 15000
    retryCount: 2
    description: "Financial Times Companies RSS Feed"
  - name: "MarketWatch"
    code: "marketwatch"
    url: "http://feeds.marketwatch.com/marketwatch/topstories/"
    weight: 0.9
    enabled: true
    timeout: 12000
    retryCount: 3
    description: "MarketWatch Top Stories RSS Feed"
  - name: "Bloomberg Economics"
    code: "bloomberg_economics"
    url: "https://feeds.bloomberg.com/economics/news.rss"
    weight: 1.2
    enabled: true
    timeout: 15000
    retryCount: 3
    description: "Bloomberg Economics News RSS Feed"
  - name: "The Economist"
    code: "economist"
    url: "https://www.economist.com/economics/rss.xml"
    weight: 1.4
    enabled: true
    timeout: 15000
    retryCount: 2
    description: "The Economist RSS Feed"

global:
  userAgent: "EconoNyang/1.0 üê±"
  defaultTimeout: 10000
  defaultRetryCount: 3
  maxArticlesPerSource: 20
  minPublishInterval: 3600

filters:
  includeKeywords:
    - "economy"
    - "business"
    - "finance"
    - "investment"
    - "market"
    - "stock"
    - "trading"
    - "earnings"
    - "revenue"
    - "profit"
    - "GDP"
    - "inflation"
    - "interest rate"
    - "federal reserve"
    - "central bank"
    - "merger"
    - "acquisition"
    - "IPO"
    - "corporate"
    - "financial"
    - "economic"
    - "fiscal"
    - "monetary"
    - "trade"
    - "export"
    - "import"
    - "currency"
    - "exchange rate"
    - "banking"
    - "securities"
    - "commodities"
  excludeKeywords:
    - "sports"
    - "entertainment"
    - "celebrity"
    - "weather"
    - "crime"
    - "accident"
    - "politics"
    - "election"
    - "gaming"
    - "lifestyle"

app:
  timezone: Asia/Seoul
  
  # Î∞∞Ïπò Ïã§Ìñâ ÏÑ§Ï†ï
  batch:
    autoRun: ${BATCH_AUTO_RUN:false}
    
  # Îã§Ïù¥Ï†úÏä§Ìä∏ Í∏∞Î≥∏ ÏÑ§Ï†ï
  digest:
    sendAt: "07:30"
    maxArticles: 10
    minImportanceScore: 5
    templateName: "default"
    format: "markdown"
    
  # OpenAI API ÏÑ§Ï†ï
  openai:
    apiBase: ${OPENAI_API_BASE:https://api.openai.com}
    apiKey: ${OPENAI_API_KEY:}
    modelSmall: ${OPENAI_MODEL_SMALL:gpt-4o-mini}
    modelMain: ${OPENAI_MODEL_MAIN:gpt-4o}
    requestTimeoutSec: 30
    enableBatch: true
    batchCutoff: "07:10"
    maxInputTokens: 5000
    maxOutputTokens: 900
    
  # Î≥∏Î¨∏ Ï∂îÏ∂ú ÏÑ§Ï†ï
  extraction:
    timeoutSec: 15
    maxRetries: 2
    retryDelayMs: 1000
    userAgent: "EconoNyang-Bot/1.0 üê± (+https://github.com/yourco/econyang)"
    
  # ÏïåÎ¶º/Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
  monitoring:
    enableHealthCheck: true
    enableMetrics: true
    logLevel: INFO
    
  # Discord ÏïåÎ¶º ÏÑ§Ï†ï
  discord:
    webhookUrl: ${DISCORD_WEBHOOK_URL:}
    enableNotification: ${DISCORD_ENABLE:true}
    dryRun: ${DRY_RUN:true}
    
  # Î≥¥Ïïà ÏÑ§Ï†ï
  security:
    enableCors: true
    corsOrigins: ${CORS_ORIGINS:http://localhost:3000,https://yourdomain.com}
    rateLimitPerMinute: 60

---
spring:
  config:
    activate:
      on-profile: dev
  
  datasource:
    url: jdbc:postgresql://localhost:5432/econyang
  
  jpa:
    show-sql: true

---
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
  
  flyway:
    enabled: false

---
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    show-sql: false
  
logging:
  level:
    com.yourco.econyang: WARN
    org.springframework.batch: WARN